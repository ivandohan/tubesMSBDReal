SELECT 
	u.id AS id, 
    u.username AS username,
    u.userLevel AS userLevel, 
    ud.name AS name, 
    ud.label AS label, 
    ud.coverPic AS coverPic, 
    ud.profilePic AS profilePic, 
    sl.level AS level
FROM users AS U 
JOIN userdetails as ud ON (ud.userId = u.id) 
JOIN schoollevel as sl ON (sl.id = ud.schLevelId)
WHERE u.username = "test3";


SELECT
  p.*,
  u.id AS userId, 
  ud.name AS name, 
  ud.profilePic AS profilePic 
FROM posts AS p
JOIN users AS u ON (u.id = p.userId)
JOIN userdetails AS ud ON (ud.userId = u.id)
ORDER BY p.createdAt DESC

CREATE VIEW view_general_posts AS
SELECT
  p.*,
  ud.name AS name, 
  ud.profilePic AS profilePic 
FROM posts AS p
JOIN userdetails AS ud ON (ud.userId = p.userId)
ORDER BY p.createdAt DESC

SELECT 
  c.id AS id,
  c.descr AS descr,
  c.createdAt AS createdAt,
  c.postId AS postId,
  ud.userId AS userId,
  ud.name AS name,
  ud.profilePic AS profilePic,
  sl.shortname AS label
FROM comments AS c 
JOIN userdetails AS ud ON (ud.userId = c.userId)
JOIN schoollevel AS sl ON (sl.id = ud.schLevelId)


SELECT 
	p.id,
    p.productName,
    p.descr,
    p.image,
    ud.name AS producerName
FROM products AS p
JOIN userdetails AS ud ON (p.producer = ud.userId)

CREATE VIEW view_community_detail AS
SELECT
	cd.id,
    cd.userId,
    cd.fullname,
    cd.vission,
    cd.mission,
    cd.motto,
    cd.year,
    sl.level
FROM communitydetails AS cd
JOIN schoollevel AS sl ON (sl.id = cd.schLevelId)

CREATE FUNCTION get_numOf_likes (
    post_id INT
) RETURNS INT
BEGIN
	DECLARE numOf_likes INT;
	SET numOf_likes = (SELECT COUNT(userId) FROM likes WHERE postId = post_id);
    RETURN numOf_likes;
END

CREATE PROCEDURE add_new_post(
	description VARCHAR(200),
    image VARCHAR(200),
    createdAtTime DATETIME,
    user_Id INT,
    catgry VARCHAR(15)
)
BEGIN
	INSERT INTO posts(`descr`, `img`, `createdAt`, `userId`, `category`) VALUES (description, image, createdAtTime, user_Id, catgry);
END

CREATE FUNCTION get_user_name(user_id INT)
RETURNS VARCHAR(100)
BEGIN
	DECLARE user_name VARCHAR(100);
    SET user_name = (SELECT name FROM userdetails WHERE userId=user_id);
    RETURN user_name;
END

CREATE TRIGGER trigg_insert_new_post
AFTER INSERT ON posts
FOR EACH ROW
BEGIN
	DECLARE creatorName VARCHAR(100);
    DECLARE descr_notif VARCHAR(200);
    
    SET creatorName = (SELECT get_user_name(NEW.userId));
    
    IF(NEW.category = "story") THEN SET descr_notif = CONCAT(creatorName, " just posted a new story.");
    END IF;
    IF(NEW.category = "event") THEN SET descr_notif = CONCAT(creatorName, " just posted a new event.");
    END IF;
    IF(NEW.category = "news") THEN SET descr_notif = CONCAT(creatorName, "just announced something new.");
    END IF;
    
    INSERT INTO log_activities (name, descr, insertedAt) VALUES (creatorName, descr_notif, NEW.createdAt);

END

CREATE PROCEDURE add_new_order(
    customer_id INT,
    ordered_at DATETIME,
    cnotes VARCHAR(250),
    stts VARCHAR(15),
	product_Id INT,
    qtty INT,
    prc INT,
    addr VARCHAR(250)
)
BEGIN
	DECLARE orderNumber INT;

    SET orderNumber = (SELECT MAX(id)+1 FROM orders);
    
    START TRANSACTION;
    INSERT INTO orders VALUES (
    	orderNumber, customer_id, ordered_at, cnotes, stts
    );

    INSERT INTO orderdetails VALUES (
    	orderNumber, product_id, qtty, prc*qtty, addr
    );
    COMMIT;
    
END


CREATE PROCEDURE add_new_user(
	uname VARCHAR(45),
    pass VARCHAR(200),
    ulevel VARCHAR(15),
    user_name VARCHAR(100),
    sch_id INT
)
BEGIN
	DECLARE usersNum INT;
	SET usersNum = (SELECT MAX(id)+1 FROM users);
    INSERT INTO users (id, username, password, userlevel, status) VALUES (usersNum, uname, pass, ulevel, "waiting");
    
    INSERT INTO userdetails (userId, name, schLevelId) VALUES (usersNum, user_name, sch_id);
END